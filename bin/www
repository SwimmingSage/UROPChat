#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('uropchat:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

// start socket.io
var io = require('socket.io').listen(server);

queue = [];

io.on('connection', function(socket) {
  console.log('a user connected');
  // When a user disconnects from out app...
  socket.on('disconnect', function() {
    console.log('a user disconnected');
  });


  socket.on('room', function(room) {
    if(socket.room) {
        socket.leave(socket.room);
    }
    socket.room = room;
    socket.join(room);
   });

  socket.on('joinRoom', function(userID) {
    if (!([userID, socket.id] in queue)){
        queue.push([userID, socket.id]);
    }
    if (queue.length >= 2) {
        [user1ID, user1Socket] = queue.shift();
        [user2ID, user2Socket] = queue.shift();
        total = [user1ID, user1Socket, user2ID, user2Socket];
        io.to(user1Socket).emit("makeChat", total);
    }
  });

  socket.on("sendToChat", function(total) {
    [user1ID, user1Socket, user2ID, user2Socket] = total;
    io.to(user1Socket).emit("sendToChat");
    io.to(user2Socket).emit("sendToChat");
  });

  // When the server receives a 'chat message' message from
  // a single user
  socket.on('chat message', function(msg) {
    // console.log('message:', msg);

    // Emit that message to all users currently connected
    // to our app
    io.socket.in(socket.room).emit('chat message', msg);
    // io.emit('chat message', msg);
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
