#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('uropchat:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);


// This code is so that I can make database calls
var mongoose = require('mongoose')

var User = mongoose.model('User');
var Plan = mongoose.model('Plan');
var Message = mongoose.model('Message');
var ChatRoom = mongoose.model('ChatRoom');

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
// start socket.io
var io = require('socket.io').listen(server);

queue = [];

io.on('connection', function(socket) {
    console.log('a user connected');
    // When a user disconnects from out app...
    socket.on('disconnect', function() {
        for (i = 0; i < queue.length; i++) {
            if (queue[i][1] === socket.id) { 
                queue.splice(i);
                break; 
            }
        }   
        if (socket.room === "preproom") {
            readyprepchange();

        } else if (socket.room === "readyroom") {
            readyprepchange();
        }
    });

    socket.on('room', function(room) {
        if(socket.room) {
            socket.leave(socket.room);
        }
        socket.room = room;
        socket.join(room);
    });

    socket.on('multiroom', function(room) {
        // socket.room = room;
        socket.join(room);
    });

    // handling que system
    readyprepchange = function() {
        output = {'prepCount': io.sockets.adapter.rooms['preproom'].length, 'readyCount': io.sockets.adapter.rooms['readyroom'].length};
        io.to('preproom').emit("userchange", output);
        io.to('readyroom').emit("userchange", output);
    }

    socket.on('in prep', function() {
        socket.join('preproom');
        socket.room = "preproom"
        readyprepchange();
    });

    socket.on('in ready', function() {
        socket.leave("preproom")
        socket.join('readyroom');
        socket.room = "readyroom";
        readyprepchange();
    });



    createChat = function(user1name, user2name){
        time = new Date();
        currentTime = time.getTime();
        var new_chat = new ChatRoom({
            Users:          [user1name, user2name],
            creationTime:   currentTime,
        })
        new_chat.id = new_chat._id.toString();
        new_chat.save();
        return new_chat
    }
    updateUser = function(userid, chatid){
        User.findOne({"id": userid}, function(err, users) {
            if (err) {
                console.log("And error occured while storing a user");
            }
            users.chat_room = newChat.id;
            users.planSubmitted = false;
            users.save();
        });
    }
    socket.on('joinRoom', function(input) {
        // Input is {'userid': user.id, 'name': user.firstname}
        if (!([input['userid'], socket.id, input['name']] in queue)){
            queue.push([input['userid'], socket.id, input['name']]);
        }
        if (queue.length >= 2) {
            [user1ID, user1Socket, user1name] = queue.shift();
            [user2ID, user2Socket, user2name] = queue.shift();
            // This makes a new chat room with these 2 new users
            newChat = createChat(user1name, user2name);
            // This adds this chat room to the user object
            updateUser(user1ID, newChat);
            updateUser(user2ID, newChat);
            io.to(user1Socket).emit("sendToChat");
            io.to(user2Socket).emit("sendToChat");
        }
    });
  addMessage = function(input){
    ChatRoom.findOne({'id': input['room']}, function(err, userchatroom){
        if (err) {
          console.log('An error occurred');
        }
        time = new Date();
        currentTime = time.getTime();
        var new_message = new Message({
            message :     input['message'],
            timeCreated : currentTime,
            sender :      input['name'],
        })
        new_message.save();
        userchatroom.Conversation.push(new_message)
        userchatroom.save();
    })
  }
  // When the server receives a 'chat message' message from
  // a single user
  socket.on('chat message', function(input) {
    // input has format of {'room': user.chat_room, 'message':message, 'sender': user.id, 'name': user.firstname, 'id':user.id};
    // emit message to users in this room
    if (input['id'] != "AdminID") {
        addMessage(input); // This adds the message to the database
    }
    output = {'message':input['message'], name: input['name'], id:input['id'], 'room': input['room']};
    io.to(input['room']).emit("recieve message", output);
  });

  socket.on('user typing', function(input) {
    // input has format of input = {'room': user.chat_room, 'name': user.firstname, 'id':user.id};
    // emit message to users in this room
    output = {'id':input['id'], name: input['name'], message: input['message'], 'room':input['room']};
    io.to(input['room']).emit("typing alert", output);
  });

  socket.on('close attempt', function(input) {
    // This gives notice the other user is trying to close the chat prematurely
    // input = {'room': user.chat_room, 'user': user.id};
    io.to(input['room']).emit("attempt close", input);
  });

  socket.on('close Chat', function(input) {
    // This closes the chat prematurely
    // input = {'room': user.chat_room, 'user': user.id};
    ChatRoom.findOne({'id': input['room']}, function(err, userchatroom){
        if (err) {
          console.log('An error occurred');
        } else if (!userchatroom.active) {
            return
        } else {
            userchatroom.active = false;
            userchatroom.save();
            io.to(input['room']).emit("chat closed", input);
        }
    })
  });
});

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
